// import React, { useState } from "react";
// import {
//   Table,
//   Button,
//   OverlayTrigger,
//   Tooltip,
//   Card,
//   Form,
// } from "react-bootstrap";

// const Taskallocation = ({ setActiveKey }) => {
//   const [currentPage, setCurrentPage] = useState(1);
//   const [showForm, setShowForm] = useState(false); // this for hide abd show the form
//   const tasksPerPage = 4;

//   const RecentlyAddedTasks = [
//     {
//       id: "001",
//       name: "UI Design",
//       assignedTo: "Kamal Perera",
//       assignedBy: "Saman Silva",
//       priority: "High",
//       estimatedTime: "4h",
//       deadline: "2024/10/15",
//       description:
//         "Design user interface for the main application page using Figma and Adobe tools.",
//     },
//     {
//       id: "002",
//       name: "API Development",
//       assignedTo: "Nimal Fernando",
//       assignedBy: "Sunil Jayasinghe",
//       priority: "Medium",
//       estimatedTime: "6h",
//       deadline: "2024/10/20",
//       description:
//         "Develop and integrate APIs for frontend communication and data flow.",
//     },
//     {
//       id: "003",
//       name: "Database Setup",
//       assignedTo: "Sunil Silva",
//       assignedBy: "Kasun Fernando",
//       priority: "Low",
//       estimatedTime: "2h",
//       deadline: "2024/10/18",
//       description:
//         "Set up MySQL database schema and initial configurations for data storage.",
//     },
//     {
//       id: "004",
//       name: "Frontend Development",
//       assignedTo: "Saman Weerasinghe",
//       assignedBy: "Chathura Jayawardena",
//       priority: "High",
//       estimatedTime: "8h",
//       deadline: "2024/10/25",
//       description:
//         "Implement responsive UI components and integrate with backend APIs.",
//     },
//     {
//       id: "005",
//       name: "Deployment",
//       assignedTo: "Chathura Jayawardena",
//       assignedBy: "Dinesh Wijesinghe",
//       priority: "Medium",
//       estimatedTime: "3h",
//       deadline: "2024/10/30",
//       description:
//         "Deploy the final version of the application to production servers.",
//     },
//     {
//       id: "006",
//       name: "Bug Fixing",
//       assignedTo: "Dinesh Wijesinghe",
//       assignedBy: "Kasun Fernando",
//       priority: "High",
//       estimatedTime: "5h",
//       deadline: "2024/10/12",
//       description:
//         "Identify and fix critical bugs reported during the testing phase.",
//     },
//   ];

//   // this for calculat current tasks for pagination
//   const indexOfLastTask = currentPage * tasksPerPage;
//   const indexOfFirstTask = indexOfLastTask - tasksPerPage;
//   const currentTasks = RecentlyAddedTasks.slice(
//     indexOfFirstTask,
//     indexOfLastTask
//   );

//   const viewAllTasks = () => {
//     setActiveKey("Taskdetails"); // to navigate to task details
//   };

//   const toggleForm = () => {
//     setShowForm((prev) => !prev); // show and hide(toggle) form visibility
//   };

//   const handleSubmit = (event) => {
//     event.preventDefault();
//   };

//   return (
//     <div>
//       <div className="d-flex justify-content-between align-items-center mb-4">
//         <h3>Task Allocation</h3>
//         <Button className="mr-4" variant="primary" onClick={toggleForm}>
//           Add new Task
//         </Button>{" "}
//       </div>
//       <Card className="p-4 mt-4">
//         {showForm && (
//           <>
//             <h5 className="text-center mb-4 text-decoration-underline">
//               Create new Task
//             </h5>
//             <Form onSubmit={handleSubmit} className="mb-4">
//               <Form.Group controlId="taskName" className="mb-3">
//                 <Form.Label>Task Name</Form.Label>
//                 <Form.Control type="text" required />
//               </Form.Group>
//               <Form.Group controlId="assignedTo" className="mb-3">
//                 <Form.Label>Assigned To</Form.Label>
//                 <Form.Control type="text" required />
//               </Form.Group>
//               <Form.Group controlId="assignedBy" className="mb-3">
//                 <Form.Label>Assigned By</Form.Label>
//                 <Form.Control type="text" required />
//               </Form.Group>
//               <Form.Group controlId="priority" className="mb-3">
//                 <Form.Label>Priority</Form.Label>
//                 <Form.Control as="select" required>
//                   <option value="">Select...</option>
//                   <option value="High">High</option>
//                   <option value="Medium">Medium</option>
//                   <option value="Low">Low</option>
//                 </Form.Control>
//               </Form.Group>
//               <Form.Group controlId="estimatedTime" className="mb-3">
//                 <Form.Label>Estimated Time</Form.Label>
//                 <Form.Control type="text" required />
//               </Form.Group>
//               <Form.Group controlId="deadline" className="mb-3">
//                 <Form.Label>Deadline</Form.Label>
//                 <Form.Control type="date" required />
//               </Form.Group>
//               <Form.Group controlId="description" className="mb-3">
//                 <Form.Label>Description</Form.Label>
//                 <Form.Control as="textarea" rows={3} required />
//               </Form.Group>
//               <Button variant="primary" type="submit">
//                 Add Task
//               </Button>
//               <Button variant="secondary" onClick={toggleForm} className="ms-2">
//                 Cancel
//               </Button>
//             </Form>
//           </>
//         )}
//         <h5 className="mt-4">Recently Added Tasks</h5>
//         <Table bordered hover responsive>
//           <thead>
//             <tr>
//               <th>ID</th>
//               <th>Task Name</th>
//               <th>Assigned To</th>
//               <th>Assigned By</th>
//               <th>Priority</th>
//               <th>Estimated</th>
//               <th>Deadline</th>
//               <th>Description</th>
//             </tr>
//           </thead>
//           <tbody>
//             {currentTasks.map((task) => (
//               <tr key={task.id}>
//                 <td>{task.id}</td>
//                 <td>{task.name}</td>
//                 <td>{task.assignedTo}</td>
//                 <td>{task.assignedBy}</td>
//                 <td>{task.priority}</td>
//                 <td>{task.estimatedTime}</td>
//                 <td>{task.deadline}</td>
//                 <OverlayTrigger
//                   placement="top"
//                   overlay={
//                     <Tooltip>
//                       {task.description.split(" ").slice(0, 10).join(" ")}
//                     </Tooltip>
//                   }
//                 >
//                   <td>
//                     {task.description.split(" ").slice(0, 2).join(" ")}...
//                   </td>
//                 </OverlayTrigger>
//               </tr>
//             ))}
//           </tbody>
//         </Table>

//         <div className="d-flex justify-content-end mt-2">
//           <Button variant="primary" onClick={viewAllTasks}>
//             View All Tasks
//           </Button>
//         </div>
//       </Card>
//     </div>
//   );
// };

// export default Taskallocation;


//------------------------------------------Based code----------------------------------------------------
import React, { useState } from "react";
import {
  Card,
  Modal,
  Dropdown,
  Form,
  Button,
  Row,
  Col,
  Table,
  OverlayTrigger,
  Tooltip,
  Breadcrumb,
} from "react-bootstrap";
import { Link } from "react-router-dom";

const TaskAllocation = () => {
  const [tasks, setTasks] = useState([
    {
      _id: "1",
      taskType: "Individual",
      taskName: "Develop Homepage",
      department: "Frontend",
      employeeId: ["A0B1C001"],
      assignedBy: "Manager1",
      priority: "High",
      estimatedTime: "5 hours",
      deadline: "2024-12-01",
      status: "Pending",
      description: "Create a responsive homepage using React.js.",
    },
    {
      _id: "2",
      taskType: "Group",
      taskName: "Implement REST API",
      department: "Backend",
      employeeId: ["A0B1C002", "A0B1C003"],
      assignedBy: "Team Lead",
      priority: "Medium",
      estimatedTime: "10 hours",
      deadline: "2024-12-03",
      status: "Pending",
      description: "Develop and integrate RESTful APIs for the application.",
    },
    {
      _id: "3",
      taskType: "Individual",
      taskName: "Set Up Database",
      department: "Database",
      employeeId: ["A0B1C004"],
      assignedBy: "Manager2",
      priority: "High",
      estimatedTime: "6 hours",
      deadline: "2024-12-02",
      status: "Pending",
      description: "Design and create database schema using MySQL.",
    },
    {
      _id: "4",
      taskType: "Group",
      taskName: "Design Login Page",
      department: "Frontend",
      employeeId: ["A0B1C005", "A0B1C006"],
      assignedBy: "Manager3",
      priority: "Medium",
      estimatedTime: "4 hours",
      deadline: "2024-12-04",
      status: "Pending",
      description: "Create a user-friendly login page with validation.",
    },
    {
      _id: "5",
      taskType: "Individual",
      taskName: "Setup Deployment",
      department: "DevOps",
      employeeId: ["A0B1C007"],
      assignedBy: "Manager1",
      priority: "High",
      estimatedTime: "3 hours",
      deadline: "2024-12-05",
      status: "Pending",
      description: "Configure CI/CD pipeline for application deployment.",
    },
    {
      _id: "6",
      taskType: "Individual",
      taskName: "Develop Homepage",
      department: "Frontend",
      employeeId: ["A0B1C001"],
      assignedBy: "Manager1",
      priority: "High",
      estimatedTime: "5 hours",
      deadline: "2024-12-01",
      status: "Pending",
      description: "Create a responsive homepage using React.js.",
    },
    {
      _id: "7",
      taskType: "Group",
      taskName: "Implement REST API",
      department: "Backend",
      employeeId: ["A0B1C002", "A0B1C003"],
      assignedBy: "Team Lead",
      priority: "Medium",
      estimatedTime: "10 hours",
      deadline: "2024-12-03",
      status: "Pending",
      description: "Develop and integrate RESTful APIs for the application.",
    },
  ]);

  const [task, setTask] = useState({
    taskType: "",
    taskName: "",
    department: "",
    employeeId: [],
    assignedBy: "",
    priority: "",
    estimatedTime: "",
    deadline: "",
    status: "Pending",
    description: "",
  });

  const [searchTerm, setSearchTerm] = useState("");
  const [taskType, setTaskType] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editingTask, setEditingTask] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [filterType, setFilterType] = useState("");

  const handleChange = (e) => {
    const { name, value } = e.target;
    setTask((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (editingTask) {
      setTasks((prevTasks) =>
        prevTasks.map((t) =>
          t._id === editingTask._id ? { ...task, _id: editingTask._id } : t
        )
      );
    } else {
      setTasks((prevTasks) => [
        ...prevTasks,
        { ...task, _id: Date.now().toString() },
      ]);
    }
    resetForm();
  };

  const handleFilterChange = (type) => {
    setFilterType(type);
  };
  const filteredTasks = tasks.filter((task) => {
    const searchInName = task.taskName
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    const searchInEmployeeId = String(task.employeeId)
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    const searchInType = task.taskType
      .toLowerCase()
      .includes(searchTerm.toLowerCase());
    const matchesFilterType = filterType ? task.taskType === filterType : true;
    //all conditions
    return (
      (searchInName || searchInEmployeeId || searchInType) && matchesFilterType
    );
  });

  const handleEdit = (taskToEdit) => {
    setTask({
      ...taskToEdit,
      deadline: new Date(taskToEdit.deadline).toISOString().split("T")[0],
    });
    setEditingTask(taskToEdit);
    setShowForm(true);
  };

  const handleDelete = (id) => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this task?"
    );
    if (confirmed) {
      setTasks((prevTasks) => prevTasks.filter((task) => task._id !== id));
    }
  };

  const resetForm = () => {
    setTask({
      taskType: "",
      taskName: "",
      department: "",
      employeeId: [],
      assignedBy: "",
      priority: "",
      estimatedTime: "",
      deadline: "",
      status: "Pending",
      description: "",
    });
    setEditingTask(null);
    setShowForm(false);
  };

  const truncateDescription = (desc) => {
    const words = desc.split(" ");
    return words.length > 2 ? `${words.slice(0, 2).join(" ")}...` : desc;
  };

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-2">
        <Breadcrumb className="mr-4 d-flex align-items-center">
          <Breadcrumb.Item linkAs={Link} linkProps={{ to: "/" }}>
            HRM
          </Breadcrumb.Item>
          <Breadcrumb.Item linkAs={Link} linkProps={{ to: "/task" }}>
            Time Management
          </Breadcrumb.Item>
          <Breadcrumb.Item active className="fs-5">
            Task Allocation
          </Breadcrumb.Item>
        </Breadcrumb>
        <div>
          <Form.Control
            type="text"
            placeholder="search task..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="mr-2"
            style={{ width: "300px" }}
          />
        </div>
      </div>
      <Card className="px-4">
        <Modal show={showModal} onHide={() => setShowModal(false)}>
          <Modal.Header closeButton>
            <Modal.Title>Select Task Type</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Button
              onClick={() => {
                setTaskType("Individual");
                setShowForm(true);
                setShowModal(false);
              }}
              variant="secondary"
              className="me-3"
            >
              Individual Task
            </Button>
            <Button
              onClick={() => {
                setTaskType("Group");
                setShowForm(true);
                setShowModal(false);
              }}
              variant="success"
            >
              Group Task
            </Button>
          </Modal.Body>
        </Modal>

        <Modal show={showForm} onHide={() => setShowForm(false)}>
          <Modal.Header closeButton>
            <Modal.Title>
              <h3 className="text-center mb-4 text-bold">
                {editingTask
                  ? `Update ${task.taskType} task`
                  : `Create a ${taskType} task`}
              </h3>
            </Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form onSubmit={handleSubmit} className="my-2">
              <Row className="mb-3">
                <Col md={6}>
                  <Form.Group controlId="taskType">
                    <Form.Label>Task Type</Form.Label>
                    <Form.Control
                      type="text"
                      name="taskType"
                      value={
                        editingTask
                          ? `${task.taskType}`
                          : `${(task.taskType = taskType)}`
                      }
                      onChange={handleChange}
                      style={{ width: "200px" }}
                      required
                    />
                  </Form.Group>
                </Col>

                <Col md={6}>
                  <Form.Group controlId="taskName">
                    <Form.Label>Task Name</Form.Label>
                    <Form.Control
                      type="text"
                      name="taskName"
                      value={task.taskName}
                      onChange={handleChange}
                      required
                    />
                  </Form.Group>
                </Col>
              </Row>
              <Row className="mb-3">
                <Col md={6}>
                  <Form.Group controlId="department">
                    <Form.Label>Department</Form.Label>
                    <Form.Control
                      as="select"
                      name="department"
                      value={task.department}
                      onChange={handleChange}
                    >
                      <option value="" disabled>
                        -- Please a department --
                      </option>
                      <option value="IT">Information Technology</option>
                      <option value="HR">Human Resource</option>
                      <option value="FC">Finance</option>
                      <option value="OP">Operations</option>
                    </Form.Control>
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group controlId="employeeId">
                    <Form.Label>Employee Id</Form.Label>
                    <Form.Control
                      type="text"
                      name="employeeId"
                      value={task.employeeId}
                      onChange={(e) =>
                        setTask({
                          ...task,
                          employeeId: e.target.value.split(","),
                        })
                      }
                      placeholder="Enter Employee IDs"
                      required
                    />
                  </Form.Group>
                </Col>
              </Row>
              <Row className="mb-3">
                <Col md={6}>
                  <Form.Group controlId="assignedBy">
                    <Form.Label>Assigned By</Form.Label>
                    <Form.Control
                      type="text"
                      name="assignedBy"
                      value={task.assignedBy}
                      onChange={handleChange}
                      required
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group controlId="priority">
                    <Form.Label>Priority</Form.Label>
                    <Form.Control
                      as="select"
                      name="priority"
                      value={task.priority}
                      onChange={handleChange}
                    >
                      <option value="" disabled>
                        -- Select priority --
                      </option>{" "}
                      <option value="High">High</option>
                      <option value="Medium">Medium</option>
                      <option value="Low">Low</option>
                    </Form.Control>
                  </Form.Group>
                </Col>
              </Row>
              <Row className="mb-3">
                <Col md={6}>
                  <Form.Group controlId="estimatedTime">
                    <Form.Label>Estimated Time</Form.Label>
                    <Form.Control
                      type="text"
                      name="estimatedTime"
                      value={task.estimatedTime}
                      onChange={handleChange}
                      required
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group controlId="deadline">
                    <Form.Label>Deadline</Form.Label>
                    <Form.Control
                      type="date"
                      name="deadline"
                      value={task.deadline}
                      onChange={handleChange}
                      required
                    />
                  </Form.Group>
                </Col>
              </Row>
              <Row className="mb-3">
                <Col md={4}>
                  <Form.Group controlId="status">
                    <Form.Label>Status</Form.Label>
                    <Form.Control
                      as="select"
                      name="status"
                      value={task.status}
                      onChange={handleChange}
                    >
                      <option value="Pending">Pending</option>
                      <option value="Ongoing">Ongoing</option>
                    </Form.Control>
                  </Form.Group>
                </Col>
                <Col md={8}>
                  <Form.Group controlId="description">
                    <Form.Label>Description</Form.Label>
                    <Form.Control
                      as="textarea"
                      name="description"
                      value={task.description}
                      onChange={handleChange}
                      rows={3}
                      required
                    />
                  </Form.Group>
                </Col>
              </Row>
              <Button variant="primary" type="submit">
                {editingTask ? "Update Task" : "Create Task"}
              </Button>
              <Button variant="secondary" className="ms-2" onClick={resetForm}>
                Cancel
              </Button>
            </Form>
          </Modal.Body>
        </Modal>

        <div className="d-flex align-items-center justify-content-between mt-3">
          <div>
            <h5 className="text-blue-800">All Tasks</h5>
          </div>
          <div className=" d-flex justify-content-center gap-4">
            <Button
              variant={
                filterType === "Individual"
                  ? "outline-primary"
                  : "outline-success"
              }
              onClick={() => handleFilterChange("Individual")}
              className="me-2"
            >
              Individual Tasks
            </Button>
            <Button
              variant={
                filterType === "Group" ? "outline-primary" : "outline-success"
              }
              onClick={() => handleFilterChange("Group")}
            >
              Group Tasks
            </Button>

            {!showForm && (
              <Button variant="primary" onClick={() => setShowModal(true)}>
                Create New Task
              </Button>
            )}
          </div>
        </div>
        <Table striped bordered hover className="mt-2">
          <thead>
            <tr>
              <th>Task Name</th>
              <th>Task Type</th>
              <th>Assigned To</th>
              <th>Priority</th>
              <th>Estimated Time</th>
              <th>Deadline</th>
              <th>Description</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredTasks.map((task) => (
              <tr key={task._id}>
                <td>{task.taskName}</td>
                <td>{task.taskType}</td>
                <td>{task.employeeId.join(", ")}</td>
                <td>{task.priority}</td>
                <td>{task.estimatedTime}</td>
                <td>{task.deadline}</td>
                <td>
                  <OverlayTrigger
                    overlay={<Tooltip>{task.description}</Tooltip>} // Show full description on hover
                  >
                    <span style={{ cursor: "pointer" }}>
                      {truncateDescription(task.description)}{" "}
                    </span>
                  </OverlayTrigger>
                </td>

                <td>
                  <Dropdown
                    className="d-flex justify-content-center"
                    drop="start"
                  >
                    <Dropdown.Toggle variant="secondary" size="sm">
                      <i className="bi bi-three-dots-vertical"></i>
                    </Dropdown.Toggle>
                    <Dropdown.Menu>
                      <Dropdown.Item onClick={() => handleEdit(task)}>
                        Edit
                      </Dropdown.Item>
                      <Dropdown.Item onClick={() => handleDelete(task._id)}>
                        Delete
                      </Dropdown.Item>
                    </Dropdown.Menu>
                  </Dropdown>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card>
    </div>
  );
};

export default TaskAllocation;
